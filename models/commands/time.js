const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "hourlyclock",
  version: "1.0.0",
  hasPermssion: 2,
  credits: "Joy",
  description: "Every hour send the Islamic time template message to configured chats.",
  commandCategory: "system",
  usages: "setclock | unsetclock | clockstatus",
  cooldowns: 5
};

const DATA_FILE = path.join(__dirname, "hourlyclock_targets.json");

function loadTargets() {
  try {
    if (!fs.existsSync(DATA_FILE)) return [];
    return JSON.parse(fs.readFileSync(DATA_FILE, "utf8")) || [];
  } catch (e) {
    return [];
  }
}
function saveTargets(arr) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(Array.from(new Set(arr)), null, 2));
}

function bnDigits(numStr) {
  // Convert western digits to Bengali digits
  const map = {0:'‡ß¶',1:'‡ßß',2:'‡ß®',3:'‡ß©',4:'‡ß™',5:'‡ß´',6:'‡ß¨',7:'‡ß≠',8:'‡ßÆ',9:'‡ßØ'};
  return String(numStr).split("").map(ch => map[ch] ?? ch).join("");
}

function buildMessage() {
  const now = new Date();
  const engDate = now.getDate();
  const engMonth = now.toLocaleString("en-US", { month: "long" });
  const weekday = now.toLocaleString("en-US", { weekday: "long" });
  // Bengali numerals for day and time
  const hours = now.getHours();
  const minutes = now.getMinutes();
  const ampm = hours >= 12 ? "PM" : "AM";

  const hour12 = hours % 12 === 0 ? 12 : hours % 12;
  const bnHourStr = bnDigits(hour12);
  const bnMinStr = bnDigits(minutes.toString().padStart(2, "0"));
  const bnDate = bnDigits(engDate);

  // NOTE: Bangla month (Bangla calendar) conversion is complex. 
  // We'll show English month name and also let you edit template easily.
  const message =
`======= ùóßùóúùó†ùóò =======
üìÖ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${engDate}
üóíÔ∏è ‡¶Æ‡¶æ‡¶∏ : ${engMonth}
üìõ ‡¶¶‡¶ø‡¶®: ${weekday}
üóìÔ∏è (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡¶æ‡¶∏/‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡¶≤‡ßá ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®)
üïí ‡¶∏‡¶Æ‡¶Ø‡¶º: ${hour12}:${String(minutes).padStart(2,"0")} ${ampm}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶®:- ‡¶≤‡¶æ-‡¶á‡¶≤‡¶æ-‡¶π‡¶æ ‡¶á‡¶≤‡ßç‡¶≤‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡ßÅ-‡¶Æ‡ßÅ‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶æ‡¶¶‡ßÅ‡¶∞ ‡¶∞‡¶æ‡¶∏‡ßÇ‡¶≤‡ßÅ‡¶≤‡ßç‡¶≤‡¶æ‡¶π
‚ãÜ‚ú¶‚ãÜ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚ãÜ‚ú¶‚ãÜ
‡¶Ö‡¶∞‡ßç‡¶•:- ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶¨‡ßç‡¶Ø‡¶§‡ßÄ‡¶§ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶â‡¶™‡¶æ‡¶∏‡ßç‡¶Ø ‡¶®‡¶æ‡¶á, ‡¶Æ‡ßÅ‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶ (‡¶∏‡¶É) ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶∞‡¶æ‡¶∏‡ßÇ‡¶≤‡•§
ùêÇùê´ùêûùêöùê≠ùê®ùê´ ‚îÅ‚û¢ ‡¶Ü‡¶§-‡¶§‡¶æ‡¶ï‡ßç‡¶¨‡¶ì‡ßü‡¶æ ‡¶´‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∂‡¶®

(‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡ßü: ${bnDate}, ‡¶∏‡¶Æ‡ßü: ${bnHourStr}:${bnMinStr} ${ampm})`;

  return message;
}

// Keep track to avoid duplicate sends within same hour
let lastSentAtHour = null;
let timer = null;

module.exports.onLoad = function ({ api }) {
  const targets = loadTargets();
  // schedule check every 20 seconds
  timer = setInterval(() => {
    try {
      const now = new Date();
      const m = now.getMinutes();
      const s = now.getSeconds();
      const h = now.getHours();
      // trigger when minute === 0 and seconds between 0..20 and not sent yet this hour
      if (m === 0 && s < 25 && lastSentAtHour !== h) {
        lastSentAtHour = h;
        const msg = buildMessage();
        for (const tid of targets) {
          // each target may be {threadID} string or number
          try {
            api.sendMessage(msg, tid);
          } catch (e) {
            console.error("hourlyclock: failed send to", tid, e);
          }
        }
      }
    } catch (err) {
      console.error("hourlyclock error:", err);
    }
  }, 20000);
  console.log("[hourlyclock] Loaded. Targets:", targets.length);
};

module.exports.onUnLoad = function () {
  if (timer) clearInterval(timer);
  console.log("[hourlyclock] Unloaded.");
};

module.exports.run = async function ({ api, event, args, Users }) {
  const { senderID, threadID } = event;
  const sub = args[0] ? args[0].toLowerCase() : "";

  let targets = loadTargets();

  if (sub === "setclock") {
    if (!targets.includes(threadID)) {
      targets.push(threadID);
      saveTargets(targets);
      return api.sendMessage("‚úÖ ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡ßü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡•§\n‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá: `unsetclock`", threadID);
    } else {
      return api.sendMessage("‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶Ü‡¶ó‡ßá‡¶á ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá‡•§", threadID);
    }
  }

  if (sub === "unsetclock") {
    if (targets.includes(threadID)) {
      targets = targets.filter(t => t !== threadID);
      saveTargets(targets);
      return api.sendMessage("‚õî ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", threadID);
    } else {
      return api.sendMessage("‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶§‡ßã ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡ßá‡¶á‡•§", threadID);
    }
  }

  if (sub === "clockstatus") {
    const list = targets.length ? targets.map((t, i) => `${i+1}. ${t}`).join("\n") : "‡¶ï‡ßã‡¶®‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡ßá‡¶á‡•§";
    return api.sendMessage(`üìå HourlyClock targets:\n${list}`, threadID);
  }

  // If no subcommand, show help
  return api.sendMessage(
    "HourlyClock module\n\nCommands:\n‚Ä¢ setclock ‚Äî ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶Å‡¶ü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡ßü ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá‡¶®\n‚Ä¢ unsetclock ‚Äî ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá\n‚Ä¢ clockstatus ‚Äî ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡ßá‡¶ñ‡¶¨‡ßá\n\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `setclock`", threadID
  );
};
